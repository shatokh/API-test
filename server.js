// server.js
require('dotenv').config(); // –∑–∞–≥—Ä—É–∂–∞–µ–º .env

const express = require('express');
const mongoose = require('mongoose');
const morgan = require('morgan');
const authRoutes = require('./routes/auth');
const { swaggerUi, specs } = require('./swagger');

const app = express();

// üåê Middleware
app.use(express.json());
app.use(morgan('dev'));

// üîê –†–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.use('/api/auth', authRoutes);

// üìò Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs, {
  customSiteTitle: '–£—á–µ–±–Ω—ã–π Auth API',
  customCss: `
    .swagger-ui .topbar { background-color: #2c3e50; }
    .swagger-ui .topbar a { color: #ecf0f1; font-weight: bold; font-size: 1.5em; }
  `,
  swaggerOptions: {
    defaultModelsExpandDepth: -1,
    docExpansion: 'list',
    displayRequestDuration: true
  }
}));

// ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI;
const JWT_SECRET = process.env.JWT_SECRET;

if (!MONGO_URI) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è MONGO_URI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ .env');
  process.exit(1);
}

if (!JWT_SECRET) {
  console.warn('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: JWT_SECRET –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞!');
}

// üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
})
  .then(() => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    });
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
  });

// üß© Runtime –æ—Ç–ª–∞–¥–∫–∞
mongoose.connection.on('error', err => {
  console.error('‚ùó –û—à–∏–±–∫–∞ MongoDB –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:', err.message);
});

mongoose.connection.on('disconnected', () => {
  console.warn('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
});

// üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  await mongoose.connection.close();
  console.log('üßº –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ –ø–æ SIGINT');
  process.exit(0);
});
